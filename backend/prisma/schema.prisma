generator client {
  provider = "go run github.com/steebchen/prisma-client-go"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model auth_status {
  aust_id String @id @db.Uuid
  type    String @db.VarChar
  user    user[]
}

model realtor {
  real_id           String            @id @db.Uuid
  user_id           String            @unique @db.Uuid
  creci             String            @db.VarChar
  description       String?           @db.VarChar
  is_online         Boolean
  avatar            String?           @db.VarChar(255)
  regions           String?           @db.VarChar(255)
  realtor_instagram String?           @db.VarChar(255)
  realtor_facebook  String?           @db.VarChar(255)
  realtor_whatsapp  String?           @db.VarChar(255)
  uf                String            @db.Uuid
  user              user              @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  realtor_location  realtor_location?
  realtor_uf        realtor_uf?

  @@unique([creci, uf], map: "unique_creci_uf_constraint")
}

model realtor_location {
  relo_id   String   @id @db.Uuid
  real_id   String   @unique(map: "unique_real_id") @db.Uuid
  latitude  Decimal? @db.Decimal(10, 6)
  longitude Decimal? @db.Decimal(10, 6)
  realtor   realtor  @relation(fields: [real_id], references: [real_id], onDelete: NoAction, onUpdate: NoAction)
}

model safety_questions {
  saqu_id               String                  @id @db.Uuid
  question              String                  @unique @db.VarChar
  safety_questions_user safety_questions_user[]
}

model safety_questions_user {
  squu_id          String           @id @db.Uuid
  saqu_id          String           @db.Uuid
  user_id          String           @db.Uuid
  answer           String           @db.VarChar
  safety_questions safety_questions @relation(fields: [saqu_id], references: [saqu_id], onDelete: NoAction, onUpdate: NoAction)
  user             user             @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  user_id               String                  @id @db.Uuid
  aust_id               String                  @db.Uuid
  name                  String                  @db.VarChar
  cpf                   String                  @db.VarChar
  email                 String                  @unique(map: "unique_email") @db.VarChar
  password              String                  @db.VarChar
  created_at            DateTime                @default(now()) @db.Timestamptz(6)
  deleted_at            DateTime?               @db.Timestamptz(6)
  date_of_birth         DateTime                @db.Date
  telephone             Json
  realtor               realtor?
  safety_questions_user safety_questions_user[]
  auth_status           auth_status             @relation(fields: [aust_id], references: [aust_id], onDelete: NoAction, onUpdate: NoAction)
}

model realtor_uf {
  reuf_id    String     @id @db.Uuid
  ufop_id    String     @db.Uuid
  real_id    String     @unique(map: "unique_uf_real_id") @db.Uuid
  realtor    realtor    @relation(fields: [real_id], references: [real_id], onDelete: NoAction, onUpdate: NoAction)
  uf_options uf_options @relation(fields: [ufop_id], references: [ufop_id], onDelete: NoAction, onUpdate: NoAction)
}

model uf_options {
  ufop_id    String       @id @db.Uuid
  uf         String       @db.VarChar(2)
  realtor_uf realtor_uf[]
}
